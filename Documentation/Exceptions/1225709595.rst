.. include:: /Includes.rst.txt

==========================
TYPO3 Exception 1225709595
==========================

.. include:: /If-you-encounter-this-exception.rst.txt

The Fluid template files "" could not be loaded TYPO3 13.4.0, 2024-11-02
========================================================================

Happens if you are trying to use a layout within a Fluid template that is included with 
:ref:`FLUIDTEMPLATE <t3tsref:cobj-template>` but did not define any path to the layouts.

Solution:

..  code-block:: diff

     page = PAGE
     page {
      10 = FLUIDTEMPLATE
      10 {
         templateName = Default
         templateRootPaths.10 = EXT:site_package/Resources/Private/Templates/Pages/
     +   partialRootPaths.10 = EXT:site_package/Resources/Private/Partials/Pages/
     +   layoutRootPaths.10 = EXT:site_package/Resources/Private/Layouts/Pages/
       }
     }

Or use a :ref:`PAGEVIEW <t3tsref:cobj-pageview>` which automatically configures these paths for you.

See also :ref:`Troubleshooting TypoScript <t3tsref:guide-troubleshooting>`.


The Fluid template files "" could not be loaded
===============================================

Exception message::

   #1225709595: The Fluid template files "" could not be loaded.
   TYPO3Fluid\Fluid\View\Exception\InvalidTemplateResourceException
   thrown in file

   /var/www/site/htdocs/typo3_src/vendor/typo3fluid/fluid/src/View/TemplatePaths.php
   in line 730.

TYPO3 10+
=========

This solution might work for most user of TYPO3 6+,
though only tested with version 10.

Solution 1
----------

If you're using a standalone view, be sure to set the controller
context. You can then adjust it to your taste if you want to. But at
least set it for the view to work properly. Including your controller
context will also cure most of your standalone view problems. The
controller context already exists in your controller in the
$this->controllerContext class field (others call it class property).
All you have to do is include it in the
:php:`$standaloneView->setControllerContext()` method like this::

   $standaloneView = GeneralUtility::makeInstance(StandaloneView::class);

   $standaloneView->setControllerContext($this->controllerContext);

   $standaloneView->setTemplatePathAndFilename('EXT:myextension/Resources/Private/Templates/'
   . $this->template);

   $standaloneView->assignMultiple($this->settings);


Solution 2
----------

If you are running your view away from the Controllers, then make sure
to fill in :php:`fillDefaultsByPackageName` with your extension key::

   $standaloneView = GeneralUtility::makeInstance(StandaloneView::class);

   $standaloneView->getTemplatePaths()->fillDefaultsByPackageName('myextension');

   $standaloneView->setTemplatePathAndFilename('EXT:myextention/Resources/Private/Templates/'
   . $this->template); ...

Older versions
==============

   #1225709595: The template files
   ".../typo3conf/ext/blsvsa2013/Resources/Private/Partials/Model/Template.html"
   could not be loaded.

-  check if the template file exist.

-  If you set the format of our view manually in the controller like this:
   `$this->request->setFormat('xml');` extbase is still looking for a file
   called `youraction.html` even if it eventually uses `youraction.xml` so you
   need to create both files, the html file can be empty. I think this is a
   bug and filled a bug report; https://forge.typo3.org/issues/46657
